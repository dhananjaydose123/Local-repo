#include <bits/stdc++.h>
using namespace std;
#define INF INT_MAX

// Structure for an item with value and weight
struct Item {
    int value, weight;
};

// Comparator function to sort items by value/weight ratio in descending order
bool compare(Item a, Item b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;
}

// Function to calculate the maximum value for the fractional knapsack
double fractionalKnapsack(int capacity, vector<Item>& items) {
    sort(items.begin(), items.end(), compare); // Sort items by value/weight ratio

    double maxValue = 0.0;
    for (auto &item : items) {
        if (capacity >= item.weight) {
            maxValue += item.value;
            capacity -= item.weight;
        } else {
            maxValue += item.value * ((double)capacity / item.weight);
            break;
        }
    }
    return maxValue;
}

// Function to solve 0/1 Knapsack problem using Dynamic Programming
int knapsack01(int capacity, vector<int>& weights, vector<int>& values, int n) {
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));

    // Build the dp table
    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= capacity; w++) {
            if (weights[i - 1] <= w) {
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][capacity];
}

int main() {
    int choice;
    cout << "Choose the knapsack problem to solve:\n";
    cout << "1. Fractional Knapsack (Greedy Algorithm)\n";
    cout << "2. 0/1 Knapsack (Dynamic Programming)\n";
    cout << "Enter your choice (1 or 2): ";
    cin >> choice;

    int n, capacity;
    cout << "Enter the number of items: ";
    cin >> n;

    vector<int> values(n), weights(n);
    vector<Item> items(n);

    cout << "Enter value and weight of each item:\n";
    for (int i = 0; i < n; i++) {
        cin >> values[i] >> weights[i];
        items[i] = {values[i], weights[i]};
    }

    cout << "Enter the capacity of the knapsack: ";
    cin >> capacity;

    if (choice == 1) {
        // Solve using Fractional Knapsack (Greedy)
        double maxProfit = fractionalKnapsack(capacity, items);
        cout << "Maximum value in Fractional Knapsack: " << maxProfit << endl;
    } else if (choice == 2) {
        // Solve using 0/1 Knapsack (Dynamic Programming)
        int maxProfit = knapsack01(capacity, weights, values, n);
        cout << "Maximum value in 0/1 Knapsack: " << maxProfit << endl;
    } else {
        cout << "Invalid choice!" << endl;
    }

    return 0;
}
