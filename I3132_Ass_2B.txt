/*

Name:- Dhananjay Dose
Roll no.:- I3132

Assignment 02(b)

Problem Statement:-
				Process control system calls: The demonstration of FORK, EXECVE and WAIT system calls along with zombie and orphan states. 

B. Implement the C program in which main program accepts an array. Main program uses the FORK system call to create a new process called a child process. Parent process sorts an array and passes the sorted array to child process through the command line arguments of EXECVE system call. The child process uses EXECVE system call to load new program which display array in reverse order.

*/

## First code - file name 'first'

#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>

void bubble_sort(int a[50],int n)
{
	int i,j,temp;
	for(i=0;i<n-1;i++)
	{
		for(j=0;j<n-i-1;j++)
		{
			if(a[j]>a[j+1])
			{
				temp=a[j];
				a[j]=a[j+1];
				a[j+1]=temp;
			}
		}	
	}
	printf("\nSorted Array is:\n");
	for(i=0;i<n;i++)
	{
		printf("%d\n",a[i]);
	}
}

int main(int argc,char *argv[])
{
	int i,j=2,l,k;
	
 	int n=argc-2;
	int a[n];
	char *args[n+1];
	args[0]=argv[1];
	
	for(i=1;i<=n;i++,j++)
	{
		args[i]=argv[j];
	}
	args[i]=(char*)0;
	
	for(l=0,i=1;i<=n;i++,l++)
	{
		a[l]=atoi(args[i]);
	}
	bubble_sort(a,n);
	
	for(l=0,i=1;i<=n;i++,l++)
	{
		sprintf(args[i],"%d",a[l]);
	}
	
	pid_t pid;
	pid=fork();
	
	if(pid==0)
	{
		printf("\nI am Child Process,my pid is %d \n",getpid());
		printf("I am Parent Process,my pid is %d \n",getppid());
		execve(argv[1],args,NULL);
	}
	else
	{
		k=wait(0);
		printf("\nI am Parent Process,my pid is %d \n",getpid());
		printf("I am Parent's Parent Process,my pid is %d \n\n",getppid());		
	}
	
	return 0;
}



## Second code - file name 'second'

#include<stdio.h>


void bubble_sort(int a[50],int n)
{
	int i,j,temp;
	for(i=0;i<n-1;i++)
	{
		for(j=0;j<n-i-1;j++)
		{
			if(a[j]<a[j+1])
			{
				temp=a[j];
				a[j]=a[j+1];
				a[j+1]=temp;
			}
		}	
	}
	printf("\nSorted Array is:\n");
	for(i=0;i<n;i++)
	{
		printf("%d\n",a[i]);
	}
}
int main(int argc,char *argv[])
{	
	int i,j=1,l,key;
	
	int n=argc-1;
	int a[n];
	char *args[n+1];
	
	printf("\nPid of the 2nd program is:%d\n",getpid());
	
	for(i=0;i<=n;i++,j++)
	{
		args[i]=argv[j];
	}
	args[i]=(char*)0;
	
	for(l=0,i=0;i<n;i++,l++)
	{
		a[l]=atoi(args[i]);
	}
	
	bubble_sort(a,n);
}

##OUTPUT-


dhananjay@dhananjay:~/Desktop$ gcc first.c -o First
dhananjay@dhananjay:~/Desktop$ gcc second.c -o second
dhananjay@dhananjay:~/Desktop$ ./first second 9 6 8 2 1 3


Sorted Array is:
1
2
3
6
8
9

I am Child Process,my pid is 6803 
I am Parent Process,my pid is 6802 

Pid of the 2nd program is:6803

Sorted Array is:
9
8
6
3
2
1

I am Parent Process,my pid is 6802 
I am Parent's Parent Process,my pid is 6643 

